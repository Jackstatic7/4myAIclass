import React, { useState, useEffect } from 'react';
import { Sword, Shield, Heart, Upload, Zap, Map, Crown } from 'lucide-react';

const CritterQuestRPG = () => {
  const [gameMode, setGameMode] = useState('map');
  const [level, setLevel] = useState(1);
  const [playerHP, setPlayerHP] = useState(100);
  const [playerMaxHP, setPlayerMaxHP] = useState(100);
  const [playerMana, setPlayerMana] = useState(50);
  const [playerMaxMana, setPlayerMaxMana] = useState(50);
  const [enemyHP, setEnemyHP] = useState(30);
  const [enemyMaxHP, setEnemyMaxHP] = useState(30);
  const [gameLog, setGameLog] = useState(['Welcome to Critter Quest! Explore the map!']);
  const [gameState, setGameState] = useState('exploring');
  const [sprites, setSprites] = useState({
    player: null,
    fox: null,
    possum: null,
    raccoon: null,
    boss: null
  });
  const [playerPos, setPlayerPos] = useState({ x: 0, y: 0 });
  const [mapGrid, setMapGrid] = useState([]);
  const [visitedCells, setVisitedCells] = useState(new Set());
  const [currentEnemy, setCurrentEnemy] = useState(null);
  const [enemyDefending, setEnemyDefending] = useState(false);
  const [isBossFight, setIsBossFight] = useState(false);

  const enemies = {
    1: { name: 'Wild Fox', type: 'fox', hp: 30, attack: 8, defense: 3 },
    2: { name: 'Sneaky Possum', type: 'possum', hp: 45, attack: 12, defense: 5 },
    3: { name: 'Bandit Raccoon', type: 'raccoon', hp: 65, attack: 15, defense: 7 },
    boss: { name: 'Lord Critterbane', type: 'boss', hp: 150, attack: 20, defense: 10 }
  };

  const GRID_SIZE = 10;

  useEffect(() => {
    generateMap();
  }, [level]);

  const generateMap = () => {
    const grid = [];
    const enemyCount = level === 3 ? 4 : 3 + level * 2;
    const treasureCount = 2 + level;
    
    for (let y = 0; y < GRID_SIZE; y++) {
      const row = [];
      for (let x = 0; x < GRID_SIZE; x++) {
        row.push({ type: 'empty', x, y });
      }
      grid.push(row);
    }

    for (let i = 0; i < enemyCount; i++) {
      let x, y;
      do {
        x = Math.floor(Math.random() * GRID_SIZE);
        y = Math.floor(Math.random() * GRID_SIZE);
      } while (grid[y][x].type !== 'empty' || (x === 0 && y === 0));
      
      const enemyTypes = ['fox', 'possum', 'raccoon'];
      grid[y][x] = { type: 'enemy', enemyType: enemyTypes[Math.floor(Math.random() * enemyTypes.length)], x, y };
    }

    for (let i = 0; i < treasureCount; i++) {
      let x, y;
      do {
        x = Math.floor(Math.random() * GRID_SIZE);
        y = Math.floor(Math.random() * GRID_SIZE);
      } while (grid[y][x].type !== 'empty' || (x === 0 && y === 0));
      
      grid[y][x] = { type: 'treasure', x, y };
    }

    if (level === 3) {
      grid[GRID_SIZE - 1][GRID_SIZE - 1] = { type: 'boss', x: GRID_SIZE - 1, y: GRID_SIZE - 1 };
    } else {
      grid[GRID_SIZE - 1][GRID_SIZE - 1] = { type: 'exit', x: GRID_SIZE - 1, y: GRID_SIZE - 1 };
    }

    setMapGrid(grid);
    setPlayerPos({ x: 0, y: 0 });
    setVisitedCells(new Set(['0,0']));
  };

  const addLog = (msg) => {
    setGameLog(prev => [...prev.slice(-5), msg]);
  };

  const handleImageUpload = (type, e) => {
    const file = e.target.files[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (event) => {
        setSprites(prev => ({ ...prev, [type]: event.target.result }));
      };
      reader.readAsDataURL(file);
    }
  };

  const movePlayer = (dx, dy) => {
    if (gameMode !== 'map') return;

    const newX = playerPos.x + dx;
    const newY = playerPos.y + dy;

    if (newX < 0 || newX >= GRID_SIZE || newY < 0 || newY >= GRID_SIZE) {
      addLog('Cannot move outside the map!');
      return;
    }

    setPlayerPos({ x: newX, y: newY });
    setVisitedCells(prev => new Set([...prev, `${newX},${newY}`]));

    const cell = mapGrid[newY][newX];
    
    if (cell.type === 'enemy') {
      addLog(`You encountered a ${cell.enemyType}!`);
      startBattle(cell.enemyType, false);
    } else if (cell.type === 'boss') {
      addLog('Lord Critterbane, the Tyrant King, stands before you!');
      startBattle('boss', true);
    } else if (cell.type === 'treasure') {
      const heal = 20;
      setPlayerHP(prev => Math.min(playerMaxHP, prev + heal));
      addLog(`Found treasure! Restored ${heal} HP!`);
      mapGrid[newY][newX] = { type: 'empty', x: newX, y: newY };
    } else if (cell.type === 'exit') {
      addLog(`Level ${level} complete! Advancing to level ${level + 1}!`);
      setLevel(level + 1);
      setPlayerHP(Math.min(playerMaxHP, playerHP + 30));
      setPlayerMana(playerMaxMana);
    }
  };

  const startBattle = (enemyType, isBoss) => {
    const enemyData = {
      fox: enemies[1],
      possum: enemies[2],
      raccoon: enemies[3],
      boss: enemies.boss
    }[enemyType];

    setCurrentEnemy(enemyData);
    setEnemyHP(enemyData.hp);
    setEnemyMaxHP(enemyData.hp);
    setGameMode('battle');
    setGameState('battle');
    setIsBossFight(isBoss);
    setEnemyDefending(false);
  };

  const endBattle = (won) => {
    if (won) {
      if (isBossFight) {
        setGameState('victory');
        addLog('Lord Critterbane falls! Victory is yours!');
      } else {
        const { x, y } = playerPos;
        mapGrid[y][x] = { type: 'empty', x, y };
        setGameMode('map');
        setGameState('exploring');
        addLog('Enemy defeated! Continue exploring.');
      }
    } else {
      setGameState('defeat');
    }
    setIsBossFight(false);
  };

  const playerAttack = () => {
    if (gameState !== 'battle') return;
    
    const baseDamage = Math.floor(Math.random() * 15) + 10;
    const damage = enemyDefending ? Math.max(1, Math.floor(baseDamage * 0.3)) : baseDamage;
    const newEnemyHP = Math.max(0, enemyHP - damage);
    setEnemyHP(newEnemyHP);
    
    if (enemyDefending) {
      addLog(`${currentEnemy.name} blocks! Only ${damage} damage dealt!`);
    } else {
      addLog(`You deal ${damage} damage to ${currentEnemy.name}!`);
    }
    
    setEnemyDefending(false);

    if (newEnemyHP <= 0) {
      addLog(`${currentEnemy.name} defeated!`);
      setTimeout(() => endBattle(true), 1000);
    } else {
      setTimeout(enemyTurn, 800);
    }
  };

  const playerSpell = () => {
    if (gameState !== 'battle' || playerMana < 20) return;
    
    const baseDamage = Math.floor(Math.random() * 25) + 20;
    const damage = enemyDefending ? Math.max(5, Math.floor(baseDamage * 0.5)) : baseDamage;
    const newEnemyHP = Math.max(0, enemyHP - damage);
    setEnemyHP(newEnemyHP);
    setPlayerMana(playerMana - 20);
    
    if (enemyDefending) {
      addLog(`Fireball partially blocked! ${damage} magic damage!`);
    } else {
      addLog(`Fireball! You deal ${damage} magic damage!`);
    }
    
    setEnemyDefending(false);

    if (newEnemyHP <= 0) {
      addLog(`${currentEnemy.name} defeated!`);
      setTimeout(() => endBattle(true), 1000);
    } else {
      setTimeout(enemyTurn, 800);
    }
  };

  const playerDefend = () => {
    if (gameState !== 'battle') return;
    
    const heal = Math.floor(Math.random() * 10) + 5;
    setPlayerHP(Math.min(playerMaxHP, playerHP + heal));
    addLog(`You defend and recover ${heal} HP!`);
    setTimeout(enemyTurn, 800);
  };

  const enemyTurn = () => {
    if (gameState !== 'battle') return;
    
    if (isBossFight) {
      const action = Math.random();
      
      if (action < 0.3) {
        setEnemyDefending(true);
        addLog(`${currentEnemy.name} raises his shield in defense!`);
      } else if (action < 0.6) {
        const damage = Math.floor(Math.random() * currentEnemy.attack) + 8;
        const newPlayerHP = Math.max(0, playerHP - damage);
        setPlayerHP(newPlayerHP);
        addLog(`${currentEnemy.name} strikes with his sword for ${damage} damage!`);
        
        if (newPlayerHP <= 0) {
          endBattle(false);
          addLog('You have been defeated...');
        }
      } else {
        const damage = Math.floor(Math.random() * (currentEnemy.attack + 10)) + 15;
        const newPlayerHP = Math.max(0, playerHP - damage);
        setPlayerHP(newPlayerHP);
        addLog(`${currentEnemy.name} unleashes a devastating combo for ${damage} damage!`);
        
        if (newPlayerHP <= 0) {
          endBattle(false);
          addLog('You have been defeated...');
        }
      }
    } else {
      const damage = Math.floor(Math.random() * currentEnemy.attack) + 5;
      const newPlayerHP = Math.max(0, playerHP - damage);
      setPlayerHP(newPlayerHP);
      addLog(`${currentEnemy.name} attacks for ${damage} damage!`);

      if (newPlayerHP <= 0) {
        endBattle(false);
        addLog('You have been defeated...');
      }
    }
  };

  const resetGame = () => {
    setLevel(1);
    setPlayerHP(100);
    setPlayerMana(50);
    setGameState('exploring');
    setGameMode('map');
    setIsBossFight(false);
    setGameLog(['Welcome to Critter Quest! Explore the map!']);
    generateMap();
  };

  const getCellColor = (cell, x, y) => {
    const isVisible = visitedCells.has(`${x},${y}`);
    const isAdjacent = Math.abs(playerPos.x - x) <= 1 && Math.abs(playerPos.y - y) <= 1;
    
    if (!isVisible && !isAdjacent) return 'bg-stone-950';
    
    if (x === playerPos.x && y === playerPos.y) return 'bg-amber-600 border-amber-400';
    
    if (isVisible || isAdjacent) {
      switch (cell.type) {
        case 'enemy': return 'bg-red-900 border-red-700';
        case 'boss': return 'bg-purple-900 border-purple-600';
        case 'treasure': return 'bg-yellow-700 border-yellow-500';
        case 'exit': return 'bg-emerald-700 border-emerald-500';
        default: return 'bg-stone-800 border-stone-700';
      }
    }
    
    return 'bg-stone-800 border-stone-700';
  };

  const getCellContent = (cell, x, y) => {
    const isVisible = visitedCells.has(`${x},${y}`);
    const isAdjacent = Math.abs(playerPos.x - x) <= 1 && Math.abs(playerPos.y - y) <= 1;
    
    if (x === playerPos.x && y === playerPos.y) {
      if (sprites.player) {
        return <img src={sprites.player} alt="P" className="w-full h-full object-contain" />;
      }
      return <div className="text-xs font-bold text-amber-900">P</div>;
    }
    
    if (isVisible || isAdjacent) {
      if (cell.type === 'boss' && sprites.boss) {
        return <img src={sprites.boss} alt="B" className="w-full h-full object-contain" />;
      }
      if (cell.type === 'enemy' && sprites[cell.enemyType]) {
        return <img src={sprites[cell.enemyType]} alt="E" className="w-full h-full object-contain" />;
      }
      
      switch (cell.type) {
        case 'enemy': return <div className="text-xs text-red-200">E</div>;
        case 'boss': return <div className="text-xs text-purple-200 font-bold">B</div>;
        case 'treasure': return <div className="text-xs text-yellow-200">T</div>;
        case 'exit': return <div className="text-xs text-emerald-200">X</div>;
        default: return null;
      }
    }
    
    return null;
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-stone-900 via-stone-800 to-stone-900 text-amber-100 p-4" style={{
      backgroundImage: 'radial-gradient(circle at 25% 25%, rgba(120, 53, 15, 0.1) 0%, transparent 50%), radial-gradient(circle at 75% 75%, rgba(87, 83, 78, 0.1) 0%, transparent 50%)'
    }}>
      <div className="max-w-6xl mx-auto">
        <div className="text-center mb-6">
          <h1 className="text-5xl font-bold text-amber-400 mb-2" style={{ textShadow: '2px 2px 4px rgba(0,0,0,0.8), 0 0 20px rgba(251, 191, 36, 0.3)' }}>
            Critter Quest
          </h1>
          <p className="text-stone-400 text-sm italic">A Medieval Adventure</p>
        </div>
        
        <div className="bg-stone-900 rounded-lg p-4 mb-6 border-2 border-amber-700 shadow-lg">
          <h2 className="text-xl font-bold mb-3 flex items-center gap-2 text-amber-400">
            <Upload size={20} /> Upload Custom Sprites
          </h2>
          <div className="grid grid-cols-2 md:grid-cols-5 gap-3">
            {['player', 'fox', 'possum', 'raccoon', 'boss'].map(type => (
              <div key={type} className="text-center">
                <label className="cursor-pointer block bg-stone-800 hover:bg-stone-700 rounded p-2 transition border border-stone-700">
                  <div className="text-sm font-semibold capitalize mb-1 text-amber-300">{type}</div>
                  <input
                    type="file"
                    accept="image/*"
                    onChange={(e) => handleImageUpload(type, e)}
                    className="hidden"
                  />
                  <div className="text-xs text-stone-500">Click to upload</div>
                </label>
              </div>
            ))}
          </div>
        </div>

        <div className="bg-stone-900 rounded-lg p-4 mb-6 border-2 border-amber-800 shadow-lg">
          <div className="flex justify-between items-center">
            <div>
              <span className="bg-gradient-to-r from-amber-700 to-amber-600 px-4 py-2 rounded-full font-bold text-amber-100 border border-amber-500 shadow-md">
                Level {level} / 3
              </span>
            </div>
            <div className="flex gap-4">
              <div className="flex items-center gap-2 bg-stone-800 px-3 py-1 rounded border border-red-900">
                <Heart size={16} className="text-red-500" />
                <span className="text-red-200">{playerHP}/{playerMaxHP}</span>
              </div>
              <div className="flex items-center gap-2 bg-stone-800 px-3 py-1 rounded border border-blue-900">
                <Zap size={16} className="text-blue-400" />
                <span className="text-blue-200">{playerMana}/{playerMaxMana}</span>
              </div>
            </div>
          </div>
        </div>

        {gameMode === 'map' && gameState !== 'victory' && gameState !== 'defeat' && (
          <div className="bg-stone-900 rounded-lg p-6 mb-6 border-2 border-emerald-800 shadow-lg">
            <h2 className="text-2xl font-bold mb-4 flex items-center gap-2 text-emerald-400">
              <Map size={24} /> The Kingdom Map
            </h2>
            <div className="grid gap-1 mb-4 p-4 bg-stone-950 rounded border-4 border-stone-800" style={{ gridTemplateColumns: `repeat(${GRID_SIZE}, minmax(0, 1fr))` }}>
              {mapGrid.map((row, y) =>
                row.map((cell, x) => (
                  <div
                    key={`${x},${y}`}
                    className={`aspect-square ${getCellColor(cell, x, y)} border-2 flex items-center justify-center text-white transition-all cursor-pointer hover:opacity-80 shadow-sm`}
                    onClick={() => {
                      const dx = x - playerPos.x;
                      const dy = y - playerPos.y;
                      if (Math.abs(dx) <= 1 && Math.abs(dy) <= 1 && (Math.abs(dx) + Math.abs(dy) === 1)) {
                        movePlayer(dx, dy);
                      }
                    }}
                  >
                    {getCellContent(cell, x, y)}
                  </div>
                ))
              )}
            </div>
            <div className="grid grid-cols-3 gap-2 max-w-xs mx-auto">
              <div></div>
              <button onClick={() => movePlayer(0, -1)} className="bg-amber-700 hover:bg-amber-600 px-4 py-2 rounded font-bold border border-amber-600 shadow-md">↑</button>
              <div></div>
              <button onClick={() => movePlayer(-1, 0)} className="bg-amber-700 hover:bg-amber-600 px-4 py-2 rounded font-bold border border-amber-600 shadow-md">←</button>
              <div className="bg-stone-800 rounded flex items-center justify-center text-xs border border-stone-700">MOVE</div>
              <button onClick={() => movePlayer(1, 0)} className="bg-amber-700 hover:bg-amber-600 px-4 py-2 rounded font-bold border border-amber-600 shadow-md">→</button>
              <div></div>
              <button onClick={() => movePlayer(0, 1)} className="bg-amber-700 hover:bg-amber-600 px-4 py-2 rounded font-bold border border-amber-600 shadow-md">↓</button>
              <div></div>
            </div>
            <div className="mt-4 text-sm text-stone-400 text-center bg-stone-800 p-3 rounded border border-stone-700">
              <p className="mb-1">P = Player | E = Enemy | T = Treasure | X = Exit | B = Boss</p>
              <p>Click adjacent tiles or use arrow buttons to move</p>
            </div>
          </div>
        )}

        {gameMode === 'battle' && gameState === 'battle' && (
          <div className={`bg-stone-900 rounded-lg p-6 mb-6 border-2 shadow-lg ${isBossFight ? 'border-purple-700' : 'border-red-800'}`}>
            <h2 className={`text-2xl font-bold mb-4 text-center ${isBossFight ? 'text-purple-400' : 'text-red-400'}`}>
              {isBossFight && <Crown className="inline mr-2" size={28} />}
              {isBossFight ? 'BOSS BATTLE!' : 'Battle!'}
              {isBossFight && <Crown className="inline ml-2" size={28} />}
            </h2>
            <div className="grid grid-cols-2 gap-8 mb-6">
              <div className="text-center">
                <div className="mb-2 flex justify-center">
                  {sprites.player ? (
                    <img src={sprites.player} alt="Player" className="w-32 h-32 object-contain" />
                  ) : (
                    <div className="w-32 h-32 bg-gradient-to-br from-amber-600 to-amber-700 rounded-lg flex items-center justify-center text-4xl font-bold border-4 border-amber-500 shadow-lg">P</div>
                  )}
                </div>
                <div className="font-bold text-xl mb-2 text-amber-300">Hero</div>
                <div className="bg-stone-800 rounded p-3 border border-stone-700">
                  <div className="flex items-center gap-2 mb-2">
                    <Heart size={16} className="text-red-500" />
                    <div className="flex-1 bg-stone-950 rounded-full h-5 border border-stone-600">
                      <div className="bg-gradient-to-r from-red-600 to-red-500 h-full rounded-full transition-all shadow-inner" style={{ width: `${(playerHP / playerMaxHP) * 100}%` }} />
                    </div>
                    <span className="text-sm text-red-200">{playerHP}/{playerMaxHP}</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <Zap size={16} className="text-blue-400" />
                    <div className="flex-1 bg-stone-950 rounded-full h-5 border border-stone-600">
                      <div className="bg-gradient-to-r from-blue-600 to-blue-500 h-full rounded-full transition-all shadow-inner" style={{ width: `${(playerMana / playerMaxMana) * 100}%` }} />
                    </div>
                    <span className="text-sm text-blue-200">{playerMana}/{playerMaxMana}</span>
                  </div>
                </div>
              </div>

              <div className="text-center">
                <div className="mb-2 flex justify-center relative">
                  {sprites[currentEnemy.type] ? (
                    <img src={sprites[currentEnemy.type]} alt={currentEnemy.name} className="w-32 h-32 object-contain" />
                  ) : (
                    <div className={`w-32 h-32 ${isBossFight ? 'bg-gradient-to-br from-purple-700 to-purple-900 border-purple-500' : 'bg-gradient-to-br from-red-700 to-red-900 border-red-600'} rounded-lg flex items-center justify-center text-4xl font-bold border-4 shadow-lg`}>
                      {isBossFight ? 'B' : 'E'}
                    </div>
                  )}
                  {enemyDefending && (
                    <div className="absolute -top-2 -right-2">
                      <Shield size={32} className="text-blue-400 animate-pulse" />
                    </div>
                  )}
                </div>
                <div className={`font-bold text-xl mb-2 ${isBossFight ? 'text-purple-300' : 'text-red-300'}`}>{currentEnemy.name}</div>
                {enemyDefending && <div className="text-sm text-blue-400 mb-2">DEFENDING</div>}
                <div className="bg-stone-800 rounded p-3 border border-stone-700">
                  <div className="flex items-center gap-2">
                    <Heart size={16} className="text-red-500" />
                    <div className="flex-1 bg-stone-950 rounded-full h-5 border border-stone-600">
                      <div className={`${isBossFight ? 'bg-gradient-to-r from-purple-600 to-purple-500' : 'bg-gradient-to-r from-red-600 to-red-500'} h-full rounded-full transition-all shadow-inner`} style={{ width: `${(enemyHP / enemyMaxHP) * 100}%` }} />
                    </div>
                    <span className="text-sm text-red-200">{enemyHP}/{enemyMaxHP}</span>
                  </div>
                </div>
              </div>
            </div>

            <div className="grid grid-cols-3 gap-4">
              <button onClick={playerAttack} className="bg-gradient-to-b from-red-600 to-red-700 hover:from-red-500 hover:to-red-600 px-4 py-3 rounded-lg font-bold flex items-center justify-center gap-2 transition border-2 border-red-800 shadow-lg">
                <Sword size={20} /> Attack
              </button>
              <button onClick={playerSpell} disabled={playerMana < 20} className={`${playerMana >= 20 ? 'bg-gradient-to-b from-purple-600 to-purple-700 hover:from-purple-500 hover:to-purple-600 border-purple-800' : 'bg-stone-700 cursor-not-allowed border-stone-800'} px-4 py-3 rounded-lg font-bold flex items-center justify-center gap-2 transition border-2 shadow-lg`}>
                <Zap size={20} /> Spell (20)
              </button>
              <button onClick={playerDefend} className="bg-gradient-to-b from-emerald-600 to-emerald-700 hover:from-emerald-500 hover:to-emerald-600 px-4 py-3 rounded-lg font-bold flex items-center justify-center gap-2 transition border-2 border-emerald-800 shadow-lg">
                <Shield size={20} /> Defend
              </button>
            </div>
          </div>
        )}

        {gameState === 'victory' && (
          <div className="bg-stone-900 rounded-lg p-6 mb-6 border-2 border-amber-600 text-center shadow-lg">
            <Crown size={64} className="mx-auto mb-4 text-amber-400 animate-pulse" />
            <div className="text-4xl mb-4 font-bold text-amber-300" style={{ textShadow: '2px 2px 4px rgba(0,0,0,0.8)' }}>VICTORY!</div>
            <p className="mb-4 text-stone-300">The kingdom is saved! You defeated Lord Critterbane!</p>
            <button onClick={resetGame} className="bg-gradient-to-b from-amber-600 to-amber-700 hover:from-amber-500 hover:to-amber-600 px-6 py-3 rounded-lg font-bold border-2 border-amber-500 shadow-lg">
              Play Again
            </button>
          </div>
        )}

        {gameState === 'defeat' && (
          <div className="bg-stone-900 rounded-lg p-6 mb-6 border-2 border-red-700 text-center shadow-lg">
            <div className="text-4xl mb-4 font-bold text-red-400" style={{ textShadow: '2px 2px 4px rgba(0,0,0,0.8)' }}>DEFEATED</div>
            <p className="mb-4 text-stone-300">You fell in battle...</p>
            <button onClick={resetGame} className="bg-gradient-to-b from-red-600 to-red-700 hover:from-red-500 hover:to-red-600 px-6 py-3 rounded-lg font-bold border-2 border-red-800 shadow-lg">
              Try Again
            </button>
          </div>
        )}

        <div className="bg-stone-900 rounded-lg p-4 border-2 border-stone-700 shadow-lg">
          <h3 className="font-bold mb-2 text-amber-400 flex items-center gap-2">
            <Sword size={16} /> Battle Chronicle
          </h3>
          <div className="space-y-1 bg-stone-950 p-3 rounded border border-stone-800">
            {gameLog.map((log, i) => (
              <div key={i} className="text-sm text-stone-300">{log}</div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default CritterQuestRPG;
